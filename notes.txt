To sum up, ng-content is used to display children in a template, ng-container is used as a non-rendered container to avoid having to add a span or a div, and ng-template allows you to group some content that is not rendered directly but can be used in other places of your template or your code.

Members order:
@Inputs
@Outputs
public fields
private fields
constructor
getters
lifecycle hooks
public methods
private methods

1. dyrektywa ngModel - przypisywanie wartości wpisanej w inpucie do atrybutu klasy
trzeba wrzucić import FormsModule w module komponentu

.ts
name = ""

.html
<input [(ngModel)]="name" >
<p>{{name}}</p>

2. deklaracja, rozszerza coś o dodatkowe elementy

@Component({
  selector: 'app-server',
  templateUrl: './server.component.html',
  styleUrls: ['./server.component.scss']
})

3. String interpolation - wyrażenia, które na końcu
printują string/konwersje na string, mogą to być jakieś pola klasy

<div>{{ title }}</div>

4.  property binding - nawiasy kwadratowe - sygnalizują dynamiczne bindowanie do domyślnych atrybutów elementu html

<button [disabled]="!allowNewServers">

Interpolacja stringów zadziała tylko raz, ale nie będzie dynamicznych zmian (poniżej)
<button disabled="{{ !allowNewServers }}" >

5. Event binding - eventy przypisujemy w nawiasach okrągłych, bez "on": onClick="źle", (onclick)="dobrze"
  
  <button(click)="onCreateServer()">

6. Passing data with event binding - poprzez użycie słowa kluczowego $event w parametrze metody obsługującej event,
mamy dostep do danych wyemitowanych razem z tym eventem

<input (input)="onUpdateServerName($event)" />

  onUpdateServerName(event: Event) {
    this.serverName = (<HTMLInputElement>event.target).value;
  }

7. Two way data binding - Działa w dwie strony, zmiana pola klasy zmienia wartość, event w inpucie zmienia pole
<input type="text" [(ngModel)]="name" />

Poniżej: Jednokierunkowe bindowanie - event zmieni zmienną, ale value inputa nie zmieni się gdy zmienimy w innym miejscu pole klasy
<input (input)="onUpdateServerName($event)" />

8. Directives - dyrektywy to instrukcje w DOM
Komponenty to dyrektywy z szablonem - nakazują stworzenie komponentu <app-component> z szablonu

9. *ngIf directive - dyrektywa *ngIf to coś w rodzaju if statement. Gwiazdka oznacza, że to dyrektywa strukturalna, czyli modyfikuje DOM.
  <p *ngIf="serverCreated">{{ serverCreationStatus }}</p>

10. *ngIf with else

  <p *ngIf="serverCreated; else noServer">{{ serverCreationStatus }}</p>
  <ng-template> #noServer>
    <p>No server. ng-template to wbudwany komponent/dyrektywa</p>
  </ng-template>

11. ngStyle directive - dyrektywa atrybutu - nie dodaje/usuwa elementów DOM, modyfikuje tylko element na którym jest obecna
sama dyrektywa pisana jest bez [], ale tu jest property binding
Dodaje pojedyncze style na bazie jakiegoś warunku

<p [ngStyle]="{backgroundColor: getColor()}">test</p>

  getColor() {
    return this.serverStatus === 'online' ? 'green' : 'red';
  }

[ngStyle] without method

<p [ngStyle]="{ backgroundColor: serverStatus === 'online' ? 'green' : 'red' }">test</p>

12. ngClass directive - dyrektywa atrybutu,
Dodaje klasy na podstawie jakiegoś warunku

<p [ngClass]="{online: serverStatus === 'online'}">test</p>
Klasa bez kropki i bez cudzysłowia

13. *ngFor directive - dyrektywa strukturalna, umożliwa loopowanie po tablicy, przypomina zastosowaniem map z reacta

  servers: string[] = ['Testserver1', 'Testserver2'];
  <app-server *ngFor="let server of servers">{{server}} - dostep do elementu tablicy z konkretnego wywołania</app-server>

Można również wyciągnąc indeks danej iteracji

  <p *ngFor="let click of clicks; let i = index">
    {{ clicks[i] }}
  </p>

14. Bingding to custom properties - passing data between components
Aby przekazać dane z rodzica do dziecka, w html rodzica dodajemy bindowanie atrybutu, a w dziecku dodajemy @Input (wraz z importem)

PARENT:
  <app-server *ngFor="let server of servers" [server]="server"></app-server>

CHILD:
import z anuglar-core

@Input() server: string = "";

<p>
  Server with ID {{server}}
</p>

15. Binding to custom properties with alias name in the outer component

PARENT:
  <app-server *ngFor="let server of servers" [SRV]="server"></app-server>

CHILD:
import z anuglar-core

@Input('SRV') server: string = "";

<p>
  Server with ID {{server}}
</p>

16. Emiting custom events - w dziecku html reagujemy na normalny wbudowany event, w ts emitujemy nowy event
w rodzicu reagujemy na customowy event poprzez kolejną metodę, w parametrze mamy dostęp do $eventu czyli danych z customowoego eventu

PARENT:
<app-cockpit
  (serverCreated)="onServerAdded($event)"
></app-cockpit>

serverElements = [{type: 'server', name: 'TestServer', content: 'just a test'}]

    onServerAdded(serverData: {serverName: string, serverContent: string}) {
    this.serverElements.push({
      type: 'server',
      name: serverData.serverName,
      content: serverData.serverContent,
    });
  }

CHILD:
<button class="btn btn-primary" (click)="onAddServer()">Add Server</button>

import output z angular-core

  newServerName: string = '';
  newServerContent: string = '';

  @Output() serverCreated = new EventEmitter<{
    serverName: string;
    serverContent: string;
  }>();

    onAddServer() {
    this.serverCreated.emit({
      serverName: this.newServerName,
      serverContent: this.newServerContent,
    });
  }

17. Emiting custom events with alias name in the outer component

CHILD:
  @Output('srvCreated') serverCreated = new EventEmitter<{
    serverName: string;
    serverContent: string;
  }>();

PARENT:
  <app-cockpit
    (srvCreated)="onServerAdded($event)"
  ></app-cockpit>

18. Local Reference - store te reference to the whole element(any) not only the value like for eg. ngModel
Typ - element

name: <input type="text" #serverRef>
<button (click)="onAddServer(serverRef)">Add server</button>

// no need for a value variable anymore
onAddServer(nameInput: HTMLInputElement) {
  console.log(nameInput.value)
}

19. Getting access to HTML elements via @ViewChild
Typ - referencja

name: <input type="text" #serverRef>

import z angular core
@ViewChild('#serverRef', {static: true}) serverContentInput: ElementRef;

onAddServer(nameInput: HTMLInputElement) {
  console.log(this.serverContentInput.nativeElement.value)
}

20. ng-content - dane pomiędzy znacznikami komponentu
PARENT
<app-server>
  <h1>Hello</h1>
</app-server>

CHILD
<div>
<ng-content></ng-content>
<h2>world</h2>
</div>

21. Lifecycle methods

  constructor() {
    console.log('constructor called');
    //Called on new object initialization
  }

  ngOnChanges(changes: SimpleChanges) {
    console.log('ngOnChanges called');
    //Called after a bound input property changes
  }

  ngOnInit(): void {
    console.log('ngOnInit called');
    //Called once the component is initialized
  }

  ngDoCheck(): void {
    console.log('ngDoCheck called');
    //Called during every change detection run
  }

  ngAfterContentInit(): void {
    console.log('ngAfterContentInit called');
    //Called after content (ng-content) has been projected into view
  }

  ngAfterContentChecked(): void {
    console.log('ngAfterContentChecked called');
    //Called every time the projected content has been checked
  }

  ngAfterViewInit(): void {
    console.log('ngAfterViewInit called');
    //Called after the component’s view (and child views) has been initialized
  }

  ngAfterViewChecked(): void {
    console.log('ngAfterViewChecked called');
    //Called every time the view (and child views) have been checked
  }

  ngOnDestroy(): void {
    console.log('ngOnDestroy called');
    //Called once the component is about to be destroyed
  }

22. Getting access to HTML elements via @ContentChild (elements that are passed to another component, therefore not directly in view - but in content)
@ContentChild('#serverRef', {static: true}) serverContentInput: ElementRef;

<app-cockpit>
  name: <input type="text" #serverRef> //this is (<ng-content)
</app-cockpit>

23. Custom attribute directive - better to use renderer, not just the element reference - not manipulate DOM directly
private attribute in the constructor adds the property to the class

ng g d

import { Directive, ElementRef, OnInit, Renderer2 } from '@angular/core';

@Directive({
  selector: '[appBetterHighlight]',
})
export class BetterHighlightDirective implements OnInit {
  constructor(private elRef: ElementRef, private renderer: Renderer2) {}

  ngOnInit() {
    this.renderer.setStyle(
      this.elRef.nativeElement,
      'background-color',
      'silver'
    );
  }
}

<p appBetterHighlight>Paragraph styled with custom directive (renderer)</p>'

24. using HostListener to listen to events that occur on the host of directive

  @HostListener('mouseenter') mouseover(eventData: Event) {
    this.renderer.setStyle(
      this.elRef.nativeElement,
      'background-color',
      'silver'
    );
  }

25. using HostBinding to bint to properties of the host element that we are using in the directive

  @HostBinding('style.backgroundColor') backgroundColor: string = 'transparent';

  @HostListener('mouseenter') mouseover(eventData: Event) {
    this.backgroundColor = 'silver';
  }

26. Binding to directive properties

A)
@Input() highlightColor: string = 'gold';
<p appBetterHighlight [highlightColor]="'red'">
  Paragraph styled with custom directive (renderer, hostbinding)
</p>

B) - only when passing string
@Input() highlightColor: string = 'gold';
<p appBetterHighlight highlightColor="red">
  Paragraph styled with custom directive (renderer, hostbinding)
</p>

C) - using alias
@Input('appBetterHighlight') highlightColor: string = 'transparent';
<p [appBetterHighlight]="red">
  Paragraph styled with custom directive (renderer, hostbinding)
</p>

27. Custom structural directive

  @Input() set appUnless(condition: boolean) {
    if (!condition) {
      this.vcRef.createEmbeddedView(this.templateRef);
    } else {
      this.vcRef.clear();
    }
  }
  constructor(
    private templateRef: TemplateRef<any>,
    private vcRef: ViewContainerRef
  ) {}

<p *appUnless="false">
  Paragraph made with custom structural directive
</p>

28. ngSwitch built in directive
value = 10;

<div [ngSwitch]="value">
  <p *ngSwitchCase="5">value is 5</p>
  <p *ngSwitchCase="10">value is 10</p>
  <p *ngSwitchDefault>value is default</p>
</div>

29. Creating a service

@Injectable({providedIn: 'root'})

export class LoggingService {
  logStatusChange(status: string) {
    console.log('A server status changed, new status: ' + status);
  }
}



  constructor(private loggingService: LoggingService) {}

  onSetTo(status: string) {
    this.loggingService.logStatusChange(status);
  }

30. Import service into service

below is a body of accounts service

  constructor(private loggingService: LoggingService) {}

  addAccount(name: string, status: string) {
    this.accounts.push({ name: name, status: status });
    this.loggingService.logStatusChange(status);
  }

31. Cross component communication using service 
-(service below)

  statusUpdated = new EventEmitter<string>();

-(component account)

  onSetTo(status: string) {
    this.accountsService.statusUpdated.emit(status);
  }

-(component new account)

  constructor(private accountsService: AccountsService) {
    this.accountsService.statusUpdated.subscribe((status: string) =>
      alert('New status: ' + status)
    );
  }

32. Routing

  app-module

const appRoutes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'users', component: UsersComponent },
  { path: 'servers', component: ServersComponent }
];

@NgModule({

  imports: [BrowserModule, FormsModule, RouterModule.forRoot(appRoutes)],

})

    <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">
      <router-outlet></router-outlet>
    </div>

        <li><a routerLink="/">Home</a></li>
        <li><a routerLink="/servers">Servers</a></li>
        <li><a routerLink="/users">Users</a></li>

/servers - with slash, it points to the root route
servers - without slash, its's relative to the current route

33. Routing with active route

        <li
          role="presentation"
          routerLinkActive="active"
          [routerLinkActiveOptions]="{ exact: true }"
        >
          <a routerLink="/">Home</a>
        </li>
        <li role="presentation" routerLinkActive="active">
          <a routerLink="/servers">Servers</a>
        </li>
        <li role="presentation" routerLinkActive="active">
          <a routerLink="/users">Users</a>
        </li>

exact-this exact route - otherwise, its active all the time, because all other paths start with a "/"

33. Trigger route change in code with router.navigate

  constructor(private router: Router) {}

  onLoadServers() {
    this.router.navigate(['/servers']);
  }

34. router.navigate with relative path
router.navigate is not aware of the current route like routerLink is, so we need to add ActivatedRoute to achieve this

  constructor(
    private router: Router,
    private route: ActivatedRoute
  ) {}

    onReload() {
    this.router.navigate(['servers'], { relativeTo: this.route });
  }

35. Routes with params

const appRoutes: Routes = [
  { path: 'users', component: UsersComponent },
  { path: 'users/:id', component: UserComponent },
];

constructor(private route: ActivatedRoute) {}

ngOnInit() {
   this.user = {
      id: this.route.snapshot.params['id']
   }
}

<a [routerLink]="['/users', 5]"></a>

JEŚLI URL MOŻE SIĘ ZMIENIĆ BEZ PRZEŁADOWANIA KOMPONENTU

ngOnInit() {
  this.rooute.params.subscribe(
     ( params: Params ) => { this.user.id = params.['id'] }
  )
}

36. Routes with child routes

const appRoutes: Routes = [
  { path: '', component: HomeComponent },
  {
    path: 'users',
    component: UsersComponent,
    children: [{ path: ':id/:name', component: UserComponent }],
  },
  {
    path: 'servers',
    component: ServersComponent,
    children: [
      { path: ':id', component: ServerComponent },
      { path: ':id/edit', component: EditServerComponent },
    ],
  },
];

we also need another <router-outlet> in the servers and users components

37. Redirect to route and catch unknown routes

  { path: 'not-found', component: PageNotFoundComponent },
  { path: '**', redirectTo: '/not-found' },

  ** path should be the last one in the file

37.1 Query Params

<a 
   [routerLink]="['/users', 5]"
   [queryParams]="{ allowEdit: '1' }"
   fragment="loading"
></a>

lub

constructor (private router: Router) {}

onLoadServer(id: number) {
   this.router.navigate(['/servers', id], {queryParams: { allowEdit: '1' }}, fragment: 'loading')

   // zachowanie params po zmianie:

   this.router.navigate(['edit'], {queryParamsHandling: 'preserve')
}

37.2 Retrieve QueryParams

constructor (private route: ActivatedRoute) {}

ngOnInit() {
   console.log(this.route.snapshot.queryParams);
   console.log(this.route.snapshot.fragment);

   // Above - tylko jeśli url sie nie zmieni z wnętrza aktualnie              // wyświetlanego komponentu
   
   // Below - jeśli url może sie zmieniać gdy komponent jest już wyrenderowany
   this.route.queryParams.subscribe()
   this.route.fragment.subscribe()
}

{ path: '', redirectTo: '/home', pathMatch: 'full' }

37.3 Outsource Routing

app-routing-module.ts

const appRoutes: Routes = {
   {path: ''. component: HomeComponent },
   ...
}

@NgModule({
   imports: [
      RouterModule.forRoot(appRoutes)
   ],
   exports: [
      RouterModule
   ]
})

app.module.ts

@NgModule({
   imports: [
      ...,
      AppRoutingModule
   ]
})

37.4 Guardy

auth-guard.service.ts

CanActivate - ma zastosowanie dla route'a i jego child route'ów
CanActivateChild - ma zastosowanie dla child route'ów (bez route'a)

export class AuthGuard implements CanActivate {
   canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
      return this.authService.isAuthenticated()
         .then(
         (authenticated: boolean) => {
            if (authenticated) {return true}
            else {this.router.navigate(['/'])}        
         })
     }
   }

{path: '/servers', canActivate: [AuthGuard] component: HomeComponent }

dodać te serwisy (guard) do providers w app.module


37.5 CanDeactivate guard - ostrzeżenie przy próbie zmiany route'a

CanDeactivate guard - ostrzeżenie przy próbie zmiany route'a

can-deactivate-guard.service.ts

export interface CanComponentDeactivate {
   canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;
}

export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {
   canDeactivate(component: CanComponentDeactivate, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState?: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
      return component.canDeactivate();   
   }
}

{path: '/servers', canDeactivateActivate: [CanDeactivateGuard] component: HomeComponent} 

// dodać do providers

edit-server.component.ts

implements: CanComponentDeactivate

allowEdit = false;
changesSaved = false;

canDeactivate(): Observable<boolean> | Promise<boolean> | boolean {
   if (!this.allowEdit) {return true}
   if (this.serverName !== this.server.name && !this.changesSaved {return confirm('Do you want to discard changes?'} else {return true}
}

37.6 Passing static data to route:

routing module:
{path: '/not-found', component: ErrorPageComponent, data: {message: 'Page not found'} } 

ErrorPageComponent:

constructor(private route: ActivatedRoute) {}

ngOnInit() {
// this.errorMessage = this.route.snapsht.data['message']
   this.route.data.subscribe(
      (data: Data) => {this.errorMessage = data['message']}
   )
}

37.7 Passing dynamic data to route - route will load after data is resolved

routing module:
{path: '/not-found', component: ErrorPageComponent, resolve: {server: ServerResolver} } 

interface Server {id: number, name: string}

@Injectable()
export class ServerResolver implements Resolve<Server> {
   constructor(private route: ActivatedRoute) {}
   
   resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Server> | Promise<Server> | Server {
      return this.serversService.getServer(+route.prams['id'])
   }

}

ngOnInit() {
   this.route.data.subscribe(
      (data: Data) => {this.server = data['server']}
   )
}

38. Observables

observable - jakies dane które mogą się zmieniać,
można się do nich subskrybować

w przypadku własnych customowych observable, trzeba zrobić unsubscribe
wbudowane mają to domyślnie

  private firstObsSubscription!: Subscription;
  constructor() {}

  ngOnInit() {
    this.firstObsSubscription = interval(1000).subscribe((count) => {
      console.log(count);
    });
  }

  ngOnDestroy() {
    this.firstObsSubscription.unsubscribe();
  }

39. Custom observable with error and completion

  ngOnInit() {
    // this.firstObsSubscription = interval(1000).subscribe((count) => {
    //   console.log(count);
    // });
    const customObservable = new Observable((observer: Observer<any>) => {
      let count = 0;
      setInterval(() => {
        observer.next(count);
        if (count === 2) {
          observer.complete();
        }
        if (count > 3) {
          observer.error(new Error('count is too big'));
        }
        count++;
      }, 1000);
    });

    this.secondObsSubscription = customObservable.subscribe(
      (data) => {
        console.log(data);
      },
      (error) => {
        alert(error.message);
      }, () => {
        console.log('completed')
      }
    );
  }

  ngOnDestroy() {
    this.secondObsSubscription.unsubscribe();
  }

40.  Using RXJS operators, operators allow us to modify the data we get fromt he observable

We need to add .pipe(), which allows us to use operators like map or/and filter

    const customObservable = new Observable((observer: Observer<any>) => {
      let count = 0;
      setInterval(() => {
        observer.next(count);
        if (count === 5) {
          observer.complete();
        }
        if (count > 10) {
          observer.error(new Error('count is too big'));
        }
        count++;
      }, 1000);
    });

    this.secondObsSubscription = customObservable
      .pipe(
        filter((data) => {
          return data > 0;
        }),
        map((data) => {
          return 'Round: ' + (data);
        })
      )
      .subscribe({
        next: (data) => {
          console.log(data);
        },
        error: (error) => {
          alert(error.message);
        },
        complete: () => {
          console.log('completed');
        },
      });
  }

  ngOnDestroy() {
    this.secondObsSubscription.unsubscribe();
  }

  41. RXJS Subject

  Subject is something we can subscribe to, we can call next on it, we can use it as an event emitter

  USER COMPONENT:

    onActivate() {
    this.userService.activatedEmitter.next(true);
    }

  USER SERVICE:

      activatedEmitter = new Subject<boolean>();

  APP COMPONENT:

        ngOnInit() {
          this.userService.activatedEmitter.subscribe(
          (didActivate) => (this.userActivated = didActivate)
        );

42. TEMPLATE FORMS

input fields need a name property, and a ngModel, so that angular registries them

            <input
              ngModel
              name="username"
              type="text"
              id="username"
              class="form-control"
            />

Form needs a reference to the object that angular creates, which is then assed to the onSubmit method
      
      <form #f="ngForm" (ngSubmit)="onSubmit(f)">

        onSubmit(form: NgForm) {
          console.log(form);
        }

43. accesing the form object with ViewChild

The benfit of this aproach is that we can use the form object before the onSubmit method is called - good for validation

      <form #f="ngForm" (ngSubmit)="onSubmit()">

        @ViewChild('f') form!: NgForm;

        onSubmit() {
          console.log(this.form);
        }

44. Simple validation - required, email
With template forms we need to add directives that are validators

            <input
              ngModel
              name="username"
              type="text"
              id="username"
              class="form-control"
              required
            />
          </div>
         
            <input
              ngModel
              name="email"
              type="email"
              id="email"
              class="form-control"
              email
            />

              onSubmit() {
                console.log(this.form.valid);
              }

Additionally, you might also want to enable HTML5 validation (by default, Angular disables it).
 You can do so by adding the ngNativeValidate  to a control in your template.

45. Displaying an validation message

we add an local reference, which points to the ngModel (and that is that exact one item of the whole form object with its properties)
            <input
              ngModel
              name="email"
              type="email"
              id="email"
              class="form-control"
              email
              required
              #email="ngModel"
            />

          <p *ngIf="!email.valid && email.touched">
            Please enter a valid email adress - eg. name@domain.com
          </p>

46. Default value - [one way binding] - we need to property bind ngModel to the class property, that has a default value attached to it

defaultPet = 'pet';

<select [ngModel]="defaultPet" name="secret" id="secret" class="form-control">
  <option value="pet">Your first Pet?</option>
  <option value="teacher">Your first teacher?</option>
</select>

47. [(Two way binding)] ngModel to have a default value, and display it if it changes

  answer = '';

     <textarea
       class="form-control"
       [(ngModel)]="answer"
       name="questionAnswer"
       rows="3"
     ></textarea>
      <p>Your reply: {{ answer }}</p>

48. Grouping form controls - we might want to use that to group some parts of the data, for eg user data, login data etc
We then have those inputs grouped in the object that angular creates, by the name we specify

We might want to add a reference to that group, so we can have the acces to the ts object, and display error messsages

1. HERE WE ADD A GROUP TO GROUP IT INSIDE THE OBJECT       
        <div ngModelGroup="loginData" 

2. HERE WE ADD A LOCAL REFERENCE, SO WE CAN ACCES THAT OBJECT           
        #loginData="ngModelGroup">

          <div class="form-group">
            <label for="password">Password</label>
            <input
              ngModel
              name="password"
              type="password"
              id="password"
              class="form-control"
              required
            />
          </div>
          <div class="form-group">
            <label for="login">Login</label>
            <input
              ngModel
              name="login"
              type="email"
              id="login"
              class="form-control"
              required
            />
          </div>

          2.1 WE ACCESS THE OBJECT HERE          
          <p *ngIf="!loginData.valid && loginData.touched">

            Login data is not valid!
          </p>
        </div>

49. Radio buttons (with default) - we loop through the array of given data

  genders = ['male', 'female'];


        <div class="radio" *ngFor="let gender of genders">
          <label>
            <input
              type="radio"
              name="gender"
              [ngModel]="'male'"   ---- normal would be just ngModel, the syntax on the left is for default
              [value]="gender"
              required
            />
            {{ gender }}
          </label>
        </div>

50. Changing the data programatically, for eg. inject a suggested username
set whole form with setValue, change only selected values with patchValue


  @ViewChild('f') myForm!: NgForm;

  suggestUserName() {
    const suggestedName = 'Superuser';

    // REPLACE WHOLE OBJECT
    // this.myForm.setValue({
    //   userData: {
    //     username: suggestedName,
    //     email: '',
    //   },
    //   secret: 'pet',
    // });

    // REPLACE ONLY SELECTED VALUES
    this.myForm.form.patchValue({
      username: suggestedName,
    });
  }

51. Display the data gathered by the form

  user = {
    username: '',
    mail: '',
    secretQuestion: '',
    secretAnswer: '',
    gender: '',
    submitted: false,
  };

  onSubmit() {
    this.user = {
      username: this.myForm.value.username,
      mail: this.myForm.value.email,
      secretQuestion: this.myForm.value.secret,
      secretAnswer: this.myForm.value.questionAnswer,
      gender: this.myForm.value.gender,
      submitted: true
    };
  }
  <div *ngIf="user.submitted">
      <h3>Your Data</h3>
      <p>Username: {{ user.username }}</p>
      <p>Mail: {{ user.mail }}</p>
      <p>Secret Question: {{ user.secretQuestion }}</p>
      <p>Answer: {{ user.secretAnswer }}</p>
      <p>Gender: {{ user.gender }}</p>
  </div>

52. Resetting forms - just use reset() method on the form viewchild.
The other approach would be to set it to specific values with setValue() and providing the whole object

  @ViewChild('f') myForm!: NgForm;

  onSubmit() {
    this.myForm.reset();
  }


53. REACTIVE FORMS  - setup
we need to import ReactiveFormsModule in app.module

then, we assing FormGroup to a class property
signupForm!: FormGroup;



54. Creating a basic form

  signupForm!: FormGroup;

  ngOnInit(): void {
    this.signupForm = new FormGroup({
      'name': new FormControl(null),
      'mail': new FormControl(null),
      'gender': new FormControl('male'),
    });
  }

  <form [formGroup]="signupForm">
    <input
      formControlName="name"
    />
    <input
      formControlName="mail"
    />
     <div class="radio" *ngFor="let gender of genders">
          <label>
            <input formControlName="gender" type="radio" [value]="gender" />{{
              gender
            }}
          </label>
        </div>
  </form>


55. Submit the reactive form - very siiliar, ngSubmit aswell, but the benefit of this is that we don't need to access te reference to the submitted form,
because we already have it definied in ts file

<form [formGroup]="signupForm" (ngSubmit)="onSubmit()">

  
  signupForm!: FormGroup;

  onSubmit() {
    console.log(this.signupForm);
  }

56. Reactive validation

  ngOnInit(): void {
    this.signupForm = new FormGroup({
      name: new FormControl(null, Validators.required),
      mail: new FormControl(null, [Validators.required, Validators.email]),
    });
  }

57. Reactive validation - display a message

? - typescript thing

    <span
      *ngIf="
        !signupForm.get('mail')?.valid && signupForm.get('mail')?.touched
      "
      class="help-block"
      >Please enter a valid email!</span
    >

58. Grouping form controls

We add another form group here

  ngOnInit(): void {
    this.signupForm = new FormGroup({
      userDetails: new FormGroup({
        name: new FormControl(null, Validators.required),
        mail: new FormControl(null, [Validators.required, Validators.email]),
      }),
      gender: new FormControl('male'),
    });
  }

  And then add formGroupName directive to the element, that gathers the items we want to group
  Then, we also need to correct the paths in the .get() method

  <form [formGroup]="signupForm" (ngSubmit)="onSubmit()">
        <div formGroupName="userDetails">
            <input
              formControlName="name"
            />
            <span
              *ngIf="
                !signupForm.get('userDetails.name')?.valid &&
                signupForm.get('userDetails.name')?.touched
              "
              >Please enter a valid username!</span
            >

59. Add an array of controls - add fields dynamically

  ngOnInit(): void {
    this.signupForm = new FormGroup({
      hobbies: new FormArray([]),
    });
  }

  onAddHobby() {
    const control = new FormControl(null, Validators.required);

    (<FormArray>this.signupForm.get('hobbies')).push(control);
  }

  getControls() {
    return (<FormArray>this.signupForm.get('hobbies')).controls;
  }

        <div formArrayName="hobbies">
          <h4>Your Hobbies</h4>
          <button type="button" (click)="onAddHobby()">Add Hobby</button>
          <div *ngFor="let hobbyControl of getControls(); let i = index">
            <input type="text" class="form-control" [formControlName]="i"/>
          </div>
        </div>

60. Custom validator

 name: new FormControl(null, [Validators.required, this.forbiddenNames.bind(this)]),

 
  forbiddenNames(control: FormControl): { [s: string]: boolean } | null {
    if (this.forbiddenUsernames.indexOf(control.value) !== -1) {
      return { nameIsForbidden: true };
    }
    return null;
  }

61. Acessing error codes from the controls, to display the appropriate error message

  <span *ngIf="signupForm.get('userDetails.name')?.errors?.['nameIsForbidden']">This name is just wrong ;)</span>
  <span *ngIf="signupForm.get('userDetails.name')?.errors?.['required']">This field is required, please type your username.</span>

62. Asynchronous validators

        mail: new FormControl(null, {
          validators: [Validators.required, Validators.email],
          asyncValidators: this.forbiddenEmail,
        }),


forbiddenEmail(control: FormControl | any): Promise<any> | Observable<any> {
    const promise = new Promise<any>((resolve, reject) => {
      setTimeout(() => {
        if (control.value === 'test@test.com') {
          resolve({ emailIsForbidden: true });
        } else {
          resolve(null);
        }
      }, 1500);
    });
    return promise;
  }

63. Reacting to status or value changes

    this.signupForm.valueChanges.subscribe((value) => {
      console.log(value);
    });

    this.signupForm.statusChanges.subscribe((value) => {
      console.log(value);
    });

64. SetValues of the form programatically, patchValue, and reset in REACTIVE FORMS

    this.signupForm.setValue({
      userDetails: {
        name: 'bs',
        mail: 'sd',
      },
      gender: 'male',
      hobbies: [],
    });

    this.signupForm.patchValue({
      userDetails: {
            name: 'bartek',
          },
    })

    this.signupForm.reset() --------- its also possible to pass an object to reset(), to reset to specific values (for eg. leave the value of default radio)

64.1 FormBuilder

    this.contactForm = this.formBuilder.group({
      firstname: ['', [Validators.required, Validators.minLength(10)]],
      lastname: ['', [Validators.required, Validators.maxLength(15), Validators.pattern("^[a-zA-Z]+$")]],
      email: ['', [Validators.required, Validators.email]],
      gender: ['', [Validators.required]],
      isMarried: ['', [Validators.required]],
      country: ['', [Validators.required]],
      address: this.formBuilder.group({
        city: ['', [Validators.required]],
        street: ['', [Validators.required]],
        pincode: ['', [Validators.required]],
      })
    });
  }
 
 
  get firstname() {
    return this.contactForm.get('firstname');
  }

65. Using HTTP

the first step is to import HttpClientModule into app.module

then, we need to asign the module to a class propety using the constructor

  constructor(private http: HttpClient) {}

66. POST request - this.http.post(url, requestBody) - and then we need to .subscribe(),
because without it the request wont be executed

  onCreatePost(postData: { title: string; content: string }) {
    this.http
      .post(
        'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json',
        postData
      )
      .subscribe((responseData) => {
        console.log(responseData);
      });
  }

67. GET request - needs subscribe() aswell

  private fetchPosts() {
    this.http
      .get(
        'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json'
      )
      .subscribe((posts) => {
        console.log(posts);
      });
  }

  
  ngOnInit() {
    this.fetchPosts();
  }

68. Use RXJS opertaor map(), to transform the data. Transofrming the object into array.

      .pipe(
        map((responseData) => {

          const postsArray = [];
          const responseObject: { [index: string]: any } = responseData;

          for (const key in responseObject) {
            if (responseData.hasOwnProperty(key)) {
              postsArray.push({ ...responseObject[key], id: key });
            }
          }

          return postsArray;
        })
      )

69. Adding types to request methods - <return type in angled brackets after the name of the method>

export interface Post {
  title: string;
  content: string;
  id?: string;
}


.get<{ [key: string]: Post }>(
  'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json'
)

70. Displaying data from api

this.http
      .get<{ [key: string]: Post }>(
        'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json'
      )
      .pipe(
        map((responseData) => {
          const postsArray: Post[] = [];

          for (const key in responseData) {
            if (responseData.hasOwnProperty(key)) {
              postsArray.push({ ...responseData[key], id: key });
            }
          }
          return postsArray;
        })
      )
      .subscribe((posts) => {
        this.loadedPosts = posts;
      });



      <p *ngIf="loadedPosts.length < 1">No posts available!</p>
      <ul *ngIf="loadedPosts.length >= 1">
        <li *ngFor="let post of loadedPosts">
          <h1>{{ post.title }}</h1>
          <p>{{ post.content }}</p>
        </li>
      </ul>

71. Showing loading paragraph when fetching is not compeletd

  isFetching = false;

  private fetchPosts() {
    this.isFetching = true;
    this.http
      .get<{ [key: string]: Post }>(
        'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json'
      )
      .pipe(
        map((responseData) => {
          const postsArray: Post[] = [];

          for (const key in responseData) {
            if (responseData.hasOwnProperty(key)) {
              postsArray.push({ ...responseData[key], id: key });
            }
          }
          return postsArray;
        })
      )
      .subscribe((posts) => {
        this.loadedPosts = posts;
        this.isFetching = false;
      });
  }

      <p *ngIf="loadedPosts.length < 1">No posts available!</p>
      <ul *ngIf="loadedPosts.length >= 1">
        <li *ngFor="let post of loadedPosts">
          <h1>{{ post.title }}</h1>
          <p>{{ post.content }}</p>
        </li>
      </ul>

      <p *ngIf="isFetching">Loading...</p>

72. Request methods in a service, instead of the component body

to get access to isFetching and loadedPosts, in service we dont call subscribe(), instead return the Observable,
and in the appropriate file chain the .subscribe() method

If you dont care about the response, you can leave the subscribe() method inside service

SERVICE:

fetchPosts() {
    return this.http
      .get<{ [key: string]: Post }>(
        'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json'
      )
      .pipe(
        map((responseData: any) => {
          const postsArray: Post[] = [];

          for (const key in responseData) {
            if (responseData.hasOwnProperty(key)) {
              postsArray.push({ ...responseData[key], id: key });
            }
          }
          return postsArray;
        })
      );
  }

COMPONENT THAT EXECUTES THE REQUEST:

  onFetchPosts() {
    this.isFetching = true;
    this.postsService.fetchPosts().subscribe((posts) => {
      this.isFetching = false;
      this.loadedPosts = posts;
    });
  }

73. DELETE request

SERVICE:

  removePosts() {
    return this.http.delete(
      'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json'
    );
  }

COMPONENT THAT EXECUTES THE REQUEST:

    onClearPosts() {
    this.postsService.removePosts().subscribe(() => {
      this.loadedPosts = [];
    });
    this.onFetchPosts();
  }

74. Handling errors in http requests

onFetchPosts() {
    this.isFetching = true;
    this.postsService.fetchPosts().subscribe(
      (posts) => {
        this.isFetching = false;
        this.loadedPosts = posts;
      },
      (error) => {
        this.error = error.message;
      }
    );
  }

75. Handling errors with subjects - maybe when hadnling errors, where subscription is not called in the component itself

    SERVICE:

    error = new Subject<string>()

    this.http.post<{ name: string }>(
      'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json',
      postData
    )
    .subscribe(responseData => {
      console.log(responseData)
    }, error => {
      this.error.next(error.message)
    });

    COMPONENT:

    error = null;
    private errorSub: Subscription;

    ngOnInit() {
      this.postService.error.subscribe(errorMessage => {
        this.error = errorMessage;
      })
    }

    ngOnDestroy() {
      this.errorSub.unsubscribe()
    }

76. catchError Operator - to send error data somewhere, not really for UI

fetchPosts() {
    return this.http
      .get<{ [key: string]: Post }>(
        'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json'
      )
      .pipe(
        map((responseData: any) => {
          const postsArray: Post[] = [];

          for (const key in responseData) {
            if (responseData.hasOwnProperty(key)) {
              postsArray.push({ ...responseData[key], id: key });
            }
          }
          return postsArray;
        }),
        catchError((errorRes) => {
          // send to analytics server
          return throwError(() => new Error(errorRes) );
        })
      );
  }


77. Improve UI with errors

Ok button to remove error message,
turn off isFetching when error uccurs


78. Headers in http requests
config object which contains headers is the last argument in the request

 return this.http.post<{ name: string }>(
      'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json',
      postData,
      {
        headers: new HttpHeaders({
          'Custom-Header': 'hello',
        }),
      }
    );


78. Query prams in http requests

    return this.http.post<{ name: string }>(
      'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json',
      postData,
      {
        headers: new HttpHeaders({
          'Custom-Header': 'hello',
        }),
        params: new HttpParams().set('print', 'pretty'),
      }
    );

79. Get the whole response (with status etc), not just the body
        observe: 'response',

            return this.http.post<{ name: string }>(
      'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json',
      postData,
      {
        headers: new HttpHeaders({
          'Custom-Header': 'hello',
        }),
        params: new HttpParams().set('print', 'pretty'),
        observe: 'response',
      }
    );

77. request event - more data about request status

removePosts() {
    return this.http
      .delete(
        'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json',
        {
          observe: 'events',
        }
      )
      .pipe(
        tap((event: any) => {
          console.log(event);
          if (event.type === HttpEventType.Sent) {
            // ...
          }
          if (event.type === HttpEventType.Response) {
            console.log(event.body);
          }
        })
      );
  }

78. Response type - default is json

    this.http
      .delete(
        'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json',
        {
          responseType: 'json',
        }
      )
79. Interceptors - they run before the request leaves the app, and let it leave the app afterwards
By default, they run on all requests, to specfiy the url, we add it in the body

// INTERCEPTOR

import { HttpHandler, HttpInterceptor, HttpRequest } from "@angular/common/http";

export class AuthInterceptorService implements HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler ) {
        // if (req.url)
    console.log('Request is on its way')
    return next.handle(req)
  }
}

// APP MODULE
@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, FormsModule, HttpClientModule],
  providers: [
    {
      provide: HTTP_INTERCEPTORS,
      useClass: AuthInterceptorService,
      multi: true,
    },
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}

80. Manipulate request in the interceptor

  intercept(req: HttpRequest<any>, next: HttpHandler ) {
    console.log('Request is on its way')
    
    // if (req.url)
    const modifiedRequest = req.clone({headers: req.headers.append('Auth', 'xyz')})
    return next.handle(modifiedRequest)
  }

81. Manipulate request in the interceptor

intercept(req: HttpRequest<any>, next: HttpHandler) {
    console.log('Request is on its way');

    // if (req.url)
    const modifiedRequest = req.clone({
      headers: req.headers.append('Auth', 'xyz'),
    });
    return next.handle(modifiedRequest).pipe(
      tap((event) => {
        console.log(event);
        if (event.type === HttpEventType.Response) {
          console.log('Response arrivec, body data: ');
          console.log(event.body);
        }
      })
    );
  }

82. Multiple interceptors


@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, FormsModule, HttpClientModule],
  providers: [
    {
      provide: HTTP_INTERCEPTORS,
      useClass: AuthInterceptorService,
      multi: true,
    },
    {
      provide: HTTP_INTERCEPTORS,
      useClass: LoggingInterceptorService,
      multi: true,
    },
  ],
  bootstrap: [AppComponent],
})



import {
  HttpEventType,
  HttpHandler,
  HttpInterceptor,
  HttpRequest,
} from '@angular/common/http';

import { tap } from 'rxjs';

export class LoggingInterceptorService implements HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler) {
    console.log('Outgoing request', req.url);
    return next.handle(req).pipe(
      tap((event) => {
        if (event.type === HttpEventType.Response) {
          console.log('Incoming response', event.body);
        }
      })
    );
  }
}

83. Custom Pipe with parameter (:parameter)

@Pipe({name: 'shorten'})

export class ShortenPipe implements PipeTransofrm {
  transform(value: any, limit: number) {
    if (value.length > limit) {
      return value.substr(0, limit) + '...';
    } else {
      return value;
    }
  }
}

{{ test.name | shorten:5 }}

add to declarations in module

84. JWT Auth
Signup request

auth.service.ts

interface Response {...}
@Injectable({providedIn: 'root'})
export class AuthService {
  constructor(private http: HttpClient) {}

  signup(email, password)<Response> {
    return (this.http.post('url', {email, password})
  }

component:

this.isLoading = true;
this.authService.signup(email, password).subscribe((res) => {this.isLoading = false}, err => {console.log(err), this.isLoading=false})

Lub error w operatorze

private handleErrorMethod(err: HttpErrorResponse) {}

signup(email, password)<Response> {
  return (this.http.post('url', {email, password}).pipe(CatchError(this.handleErrorMethod))
}

85. Save login response data
  user = new Subject<User>();

  private handleAuthentication(email, id, token) {
  const user = new User(email, id, token)
  this.user.next(user)
}

return this.http.post('url', {email, password})
  .pipe(
    catchError(this.handleErrorMethod),
    tap(resData => {this.handleAuthentication(resData})
  )

86 - reflect auth state in ui
ngOnInit() {
  this.userSub: Subscription = this.authService.user.subscribe(user=>{
    this.isAuthenticated = !!user
  }
}

87 - Add token to request
user = new BehaviourSubject<User>(null)
- BehaviourSubject 
- dostaje wartość na start 
- wtedy kolejny subskrybent ma dostęp do ostatnio zapisanej wartośći, nawet przed tym jak się sam zasubował

fetchRecipes() {
  this.authService.user.pipe(
    take(1), // zasubuj, weź wartość (1), unsub
    exhaustMap(user=>{
      return this.http.get<Recipe[]>('url')
      user.token -> auth header or queryParam
    }) // zaczekaj na poprzednią wartość i użyj jej dalej, wewnątrz zwróć observable, które zastąpi cały ciąg observabli - pójdzie na samą górę - jakby pierwsza do której sub
  )
}

88 - Add token via interceptor

auth-interceptor.service.ts

@Injectable()
export class AuthInterceptorService implements HttpInterceptor {
  constructor (private authService: AuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler) {
    return this.authService.user.pipe(
      take(1)
      exhaustMap(user=>{
        if (!user) {
          return next.handle(req)
        // interceptor jest dodawany do każdego requesta, nawet do loginu który dopiero zwróci usera.
        // dlatego jeśli usera nie ma, to zwracamy oryginalny request
        // można też uwzględniać/wykluczać url
        }

        const modifiedReq = req.clone({params: new HttpParams().set('auth', user.token) })
        return next.handle(modifiedReq)
      })
    )
  }
}

app.module

proviuders: [..., {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptorService, multi: true}]

89. Logout

auth.service.ts
logout() {
  this.user.next(null)
  this.router.navigate(['/auth'])
}

component:
this.authService.logout()

90. Auto Log In - local storage

localStorage.setItem('userData', JSON.stringify(user))

autoLogin() {
  const userData = JSON.parse(localStorage.getItem('userData'))
  if (!userData) {return;}
  
  const loadedUser = new User(userData.email...)
  
  if (loadedUser.token) {this.user.next(loadedUser};
}

ngOnInit() {
  this.authService.autoLogin();
}

91 - auto-logout
auth.service.ts

logout() {
  this.user.next(null}
  this.router.navigate(['/auth']);
  localStorage.removeItem('userData');

  if(this.tokenExpirationTimer) {
    clearTimeout(this.tokenExpirationTimer)
  }
}

autoLogout(expirationDuration) {
  this.tokenExpirationTimer = setTimeout(()={
    this.logout();
   expirationDuration)}
}

handleAuthentication() {
  ...,
  this.autoLogout(10000)
}

92 - auth guard

auth.guard.ts 

@Injectable({providedIn: 'root'}) // or provides array
export class AuthGuard implements CanActivate {
  constructor (private authService: AuthService, private router: Router) {}

  canActivate(route: ActivatedRouteSnapshot, router: RouterStateSnapshot):boolean | Promise<boolean> | Observable<boolean> | UrlTree {
    return this.authService.user.pipe(
      take(1),
      map(user => {
        const isAuth = !!user;
        if (isAuth) {
          return true;
        }
        return this.router.createUrlTree(['/auth'])
      })
    );
  }
}

app-routing.module.ts
{
  path: 'recipes',
  component: RecipesComponent,
  canActivate: [AuthGuard]
}

93 - Dynamic components - programmatic creation
alert.component.ts
export class AlertComponent {
  @Input() message: string;
  @Output() close = new EventEmitter<void>();

  conClose() {
    this.close.emit()
  }
}

placeholder.directive.ts - directive to get the element where action is called
@Directive({
  selector: '[appPlaceholder]'
})
export class PlaceholderDirective {
  constructor(public viewContainerRef: ViewContainerRef) {}
}

auth.component.ts
@ViewChild(PlaceholderDirective, {static: false}) alertHost: PlaceholderDirective;

constructor(private componentFactoryResolver: ComponentFactoryResolver) {}
this.showErrorAlert(error) {
  const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory(AlertComponent);
  const hostViewContainerRef = this.alertHost.viewContainerRef;
  hostViewContainerRef.clear();
  hostViewContainerRef.createComponent(alertCmpFactory);
}

authObs.subscribe(
  resData=> {
    this.isLoading = false;
    this.router.navigate9['/recipes']);
  },
  errorMessage => {
    this.showErrorAlert(errorMessage)
  }
)

auth.component.html
<ng-template appPlaceholder></ng-template>

94 - dynamic component - data & event binding
auth.component.ts

private closeSub: Subscriptionl
this.showErrorAlert(error) {
  const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory(AlertComponent);
  const hostViewContainerRef = this.alertHost.viewContainerRef;
  hostViewContainerRef.clear();

  const componentRef = hostViewContainerRef.createComponent(alertCmpFactory);
  componentRef.instance.message = error;
   this.closeSub = componentRef.instance.close.subscribe(() => {
      this.closeSub.unsubscribe();
      hostViewContainerRef.clear();
  })
}
ngOnDestroy() {
  if(this.closeSub) {
    this.closeSub.unsubscribe();
  }
}


95 - Angular modules
It's good to split angular app into separate modules.
AppModule, RoutingModule, RecipesModule, TasksModule etc.

Import other modules in import array in AppModule
Each module has to import modules that it's going to use on its own - like routing module or http module.
Each feature module should have it's own routing module
It's worth it to create shared-module - for dropdowns, buttons, directives etc

AppModule:
@NgModule({
  declarations: [AppComponent, HeaderComponent],
  imports: [
    BrowserModule,
    HttpClientModule,
    AppRoutingModule,
    SharedModule,
    CoreModule
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}

CoreModule:
@NgModule({
  providers: [
    ShoppingListService,
    RecipeService,
    {
      provide: HTTP_INTERCEPTORS,
      useClass: AuthInterceptorService,
      multi: true
    }
  ]
})
export class CoreModule {}

RecipesModule:
@NgModule({
  declarations: [
    RecipesComponent,
    RecipeListComponent,
    RecipeDetailComponent,
    RecipeItemComponent,
    RecipeStartComponent,
    RecipeEditComponent
  ],
  imports: [
    RouterModule,
    ReactiveFormsModule,
    RecipesRoutingModule,
    SharedModule
  ]
})
export class RecipesModule {}

AppRoutingModule
const appRoutes: Routes = [
  { path: "", redirectTo: "/recipes", pathMatch: "full" },
  {
    path: "recipes",
    loadChildren: () =>
      import("./recipes/recipes.module").then(m => m.RecipesModule)
  },
  {
    path: "shopping-list",
    loadChildren: () =>
      import("./shopping-list/shopping-list.module").then(
        m => m.ShoppingListModule
      )
  },
  {
    path: "auth",
    loadChildren: () => import("./auth/auth.module").then(m => m.AuthModule)
  }
];

@NgModule({
  imports: [RouterModule.forRoot(appRoutes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}

RecipesRoutingModule
const routes: Routes = [
  {
    path: '',
    component: RecipesComponent,
    canActivate: [AuthGuard],
    children: [
      { path: '', component: RecipeStartComponent },
      { path: 'new', component: RecipeEditComponent },
      {
        path: ':id',
        component: RecipeDetailComponent,
        resolve: [RecipesResolverService]
      },
      {
        path: ':id/edit',
        component: RecipeEditComponent,
        resolve: [RecipesResolverService]
      }
    ]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class RecipesRoutingModule {}


96 - Lazy loading modules

AppModule:
@NgModule({
  declarations: [AppComponent, HeaderComponent],
  imports: [
    BrowserModule,
    HttpClientModule,
    AppRoutingModule,
    SharedModule,
    CoreModule
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}

AppRoutingModule
const appRoutes: Routes = [
  { path: "", redirectTo: "/recipes", pathMatch: "full" },
  {
    path: "recipes",
    loadChildren: () =>
      import("./recipes/recipes.module").then(m => m.RecipesModule)
  },
];

RecipesRoutingModule
const routes: Routes = [
  {
    path: '',
    component: RecipesComponent,
    canActivate: [AuthGuard],
    children: [
      { path: '', component: RecipeStartComponent },
      { path: 'new', component: RecipeEditComponent },
      {
        path: ':id',
        component: RecipeDetailComponent,
        resolve: [RecipesResolverService]
      },
      {
        path: ':id/edit',
        component: RecipeEditComponent,
        resolve: [RecipesResolverService]
      }
    ]
  }
];

97 - preoload ladzy modules

AppRoutingModule
@NgModule({
  imports: [RouterModule.forRoot(appRoutes, { preloadingStrategy: PreloadAllModules })],
  exports: [RouterModule]
})

This will preload other route modules after the initial load of page.

98 - services in modules
If service is provided in root then theres one instance for whole app
if its only imported in specific module its only available there
bugs if in shared.module
Try to always make them available app-wide

98 - Deployment - env variables
src > environments

export const environment = {
  production: false,
  apiKey: "keyvalue"
}

import {environment} from 'environments/environment'

useage: environment.apiKey

99. Angular Elements
They allow us to create Web components - native js
Can be used only in angular apps

<div [innerHTML]="content"></div>

conent = null
constructor() {
  setTimeout(() => {
    this.content = "<app-alert message="text" />
  })
}

Above won't work, because you can'y add angular logic to inner html after compilation.

So to make this work install:

@angular/elements,
@webcomponents/custom-elements

import createCustomElement from '@angular/elements'; 

constructor(injector: Injector, domSanitizer: DomSanitizer) {
  const AlertElement = createCustomElement(AlertComponent, {injector: injector}); // angular-elements
  customElements.define('my-alert-element', AlertElement) // native js
  setTimeout(() => {
    this.content = domSanitizer.bypassSecurityTrustHtml("<my-alert-element message="text" />")
  })
}

add the component from which you are making the angular element to entryComponents array in app.module - might not be neded anymore
entryCOmponents: [AlertComponent]

100 - Standalone components
Allow us to not use ngModules
Remove from declarations array in ngModule

If we want to use a standalone component inside 'normal' component, we have to add it to imports array  in the ngModule
If we want to use a standalone component inside another standalone components, we have to add it to imports array in the 'using' component 

@Component({standalone: true, selector..., templateUrl..., styleUrls...})

impprts [StadndaloneComponentExample]

Standalone component also can have imports array, in which we can add for eg. sharedModule to import stuff that it needs

Directives and Pipes can also be standalone

@Component({standalone: true, imports: [StandaloneDirectiveExample], selector..., templateUrl..., styleUrls...})

101 - Standalone root component
We can aldo get rid of app.module and therefore get rid of ngModules in our app all together

main.ts
import bootstrapApplication fromm '@angular/platforn-browser'

bootstrapApplication(AppComponent)

102 - Providing services in providers array in root instead of adding 'providedIn: root' in the directive itself

But that's not needed, probidedIn: root is better

bootstrapApplication(AppComponent, {
  providers: [SomethingService]
})

103 - Routing Standalone Components

First - add RouterModule to imports array in app.component.ts

bootstrapApplication(AppComponent, {
  providers: [importProvidersFrom(AppRoutingModule)]
})

104 - Lazy Loading in StandaloneComponents
With modules if we want to lazy-load a component, we have to make it a separate module and then use lazy-syntax, with StandaloneComponents we can use with every component without any modules.


Routing file:

{
  path: 'about',
  loadComponent:() => import ('./about/about.component').then((mod)=>mod.AboutComponent)
}

We can spearate routing of different parts of applications without creating a routing-module for it. 

dashboard-routes.ts
export const DASHBOARD_ROUTES: Route[] = [
  {
    path: '',
    component: DashboardComponent
  },
  {
    path: 'today',
    component: TodayComponent
  }
]

app-routing.module.ts

{
  path: 'dashboard',
  loadComponent:() => import ('./dashboard/dashboard-routes').then((mod)=>mod.DASHBOARD_ROUTES)
}

(thats with lazy-loading)

Each Standalone Component needs ti import RouterModule in imports array to use it's methods like routerLink


105 - Angular Signals
They are used to replace the existing change detection in angular and do it manually - faster and smaller bundle size. As of v.16 this is only a dev-preview feature.

import {signal} from '@angular/core'

counter = 0 //old
counter = signal(0) //new - using signal - wrapper that creates a signal from data

106 - Change value of signal

increment() {
  this.counter++; // old
}

//1
increment() {
  this.counter.set(1); // set value of signal
}

//2
increment() {
  this.counter.update((oldCounter)=>{oldCounter + 1}); // update value of signal
}

//3 
increment() {
  this.counter.set(this.counter() + 1);
}

//4
actions: = signal<string[]>([])
increment() {
  this.counter.mutate((oldActions)=> oldActions.push('increment'));
}

//5
actions: = signal<string[]>([])
increment() {
  this.counter.update((oldActions)=>{[...oldActions, 'increment']});
}

<li *ngFor="let action of actions()"">{{action}}</li>


107 - Read signal value
//old
<div>{{counter}}</div>

//new
<div>{{counter()}}</div>

308 - Computed Signals

doubleCounter = computed(()=>{this.counter() * 2}) //value based on signals - will be updated when signal changes

309 - effect signal - run code when any signal in the effect function changes

constructor() {
  effect(()=>{console.log(this.counter()})
}
