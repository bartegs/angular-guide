1. dyrektywa ngModel - przypisywanie wartości wpisanej w inpucie do atrybutu klasy
trzeba wrzucić import FormsModule w module komponentu

.ts
name = ""

.html
<input [(ngModel)]="name" >
<p>{{name}}</p>

2. deklaracja, rozszerza coś o dodatkowe elementy

@Component({
  selector: 'app-server',
  templateUrl: './server.component.html',
  styleUrls: ['./server.component.scss']
})

3. String interpolation - wyrażenia, które na końcu
printują string/konwersje na string, mogą to być jakieś pola klasy

<div>{{ title }}</div>

4.  property binding - nawiasy kwadratowe - sygnalizują dynamiczne bindowanie do domyślnych atrybutów elementu html

<button [disabled]="!allowNewServers">

Interpolacja stringów zadziała tylko raz, ale nie będzie dynamicznych zmian (poniżej)
<button disabled="{{ !allowNewServers }}" >

5. Event binding - eventy przypisujemy w nawiasach okrągłych, bez "on": onClick="źle", (onclick)="dobrze"
  
  <button(click)="onCreateServer()">

6. Passing data with event binding - poprzez użycie słowa kluczowego $event w parametrze metody obsługującej event,
mamy dostep do danych wyemitowanych razem z tym eventem

<input (input)="onUpdateServerName($event)" />

  onUpdateServerName(event: Event) {
    this.serverName = (<HTMLInputElement>event.target).value;
  }

7. Two way data binding - Działa w dwie strony, zmiana pola klasy zmienia wartość, event w inpucie zmienia pole
<input type="text" [(ngModel)]="name" />

Poniżej: Jednokierunkowe bindowanie - event zmieni zmienną, ale value inputa nie zmieni się gdy zmienimy w innym miejscu pole klasy
<input (input)="onUpdateServerName($event)" />

8. Directives - dyrektywy to instrukcje w DOM
Komponenty to dyrektywy z szablonem - nakazują stworzenie komponentu <app-component> z szablonu

9. *ngIf directive - dyrektywa *ngIf to coś w rodzaju if statement. Gwiazdka oznacza, że to dyrektywa strukturalna, czyli modyfikuje DOM.
  <p *ngIf="serverCreated">{{ serverCreationStatus }}</p>

10. *ngIf with else

  <p *ngIf="serverCreated; else noServer">{{ serverCreationStatus }}</p>
  <ng-template> #noServer>
    <p>No server. ng-template to wbudwany komponent/dyrektywa</p>
  </ng-template>

11. ngStyle directive - dyrektywa atrybutu - nie dodaje/usuwa elementów DOM, modyfikuje tylko element na którym jest obecna
sama dyrektywa pisana jest bez [], ale tu jest property binding
Dodaje pojedyncze style na bazie jakiegoś warunku

<p [ngStyle]="{backgroundColor: getColor()}">test</p>

  getColor() {
    return this.serverStatus === 'online' ? 'green' : 'red';
  }

[ngStyle] without method

<p [ngStyle]="{ backgroundColor: serverStatus === 'online' ? 'green' : 'red' }">test</p>

12. ngClass directive - dyrektywa atrybutu,
Dodaje klasy na podstawie jakiegoś warunku

<p [ngClass]="{online: serverStatus === 'online'}">test</p>
Klasa bez kropki i bez cudzysłowia

13. *ngFor directive - dyrektywa strukturalna, umożliwa loopowanie po tablicy, przypomina zastosowaniem map z reacta

  servers: string[] = ['Testserver1', 'Testserver2'];
  <app-server *ngFor="let server of servers">{{server}} - dostep do elementu tablicy z konkretnego wywołania</app-server>

Można również wyciągnąc indeks danej iteracji

  <p *ngFor="let click of clicks; let i = index">
    {{ clicks[i] }}
  </p>

14. Bingding to custom properties - passing data between components
Aby przekazać dane z rodzica do dziecka, w html rodzica dodajemy bindowanie atrybutu, a w dziecku dodajemy @Input (wraz z importem)

PARENT:
  <app-server *ngFor="let server of servers" [server]="server"></app-server>

CHILD:
import z anuglar-core

@Input() server: string = "";

<p>
  Server with ID {{server}}
</p>

15. Binding to custom properties with alias name in the outer component

PARENT:
  <app-server *ngFor="let server of servers" [SRV]="server"></app-server>

CHILD:
import z anuglar-core

@Input('SRV') server: string = "";

<p>
  Server with ID {{server}}
</p>

16. Emiting custom events - w dziecku html reagujemy na normalny wbudowany event, w ts emitujemy nowy event
w rodzicu reagujemy na customowy event poprzez kolejną metodę, w parametrze mamy dostęp do $eventu czyli danych z customowoego eventu

PARENT:
<app-cockpit
  (serverCreated)="onServerAdded($event)"
></app-cockpit>

serverElements = [{type: 'server', name: 'TestServer', content: 'just a test'}]

    onServerAdded(serverData: {serverName: string, serverContent: string}) {
    this.serverElements.push({
      type: 'server',
      name: serverData.serverName,
      content: serverData.serverContent,
    });
  }

CHILD:
<button class="btn btn-primary" (click)="onAddServer()">Add Server</button>

import output z angular-core

  newServerName: string = '';
  newServerContent: string = '';

  @Output() serverCreated = new EventEmitter<{
    serverName: string;
    serverContent: string;
  }>();

    onAddServer() {
    this.serverCreated.emit({
      serverName: this.newServerName,
      serverContent: this.newServerContent,
    });
  }

17. Emiting custom events with alias name in the outer component

CHILD:
  @Output('srvCreated') serverCreated = new EventEmitter<{
    serverName: string;
    serverContent: string;
  }>();

PARENT:
  <app-cockpit
    (srvCreated)="onServerAdded($event)"
  ></app-cockpit>

18. Local Reference - store te reference to the whole element(any) not only the value like for eg. ngModel
Typ - element

name: <input type="text" #serverRef>
<button (click)="onAddServer(serverRef)">Add server</button>

// no need for a value variable anymore
onAddServer(nameInput: HTMLInputElement) {
  console.log(nameInput.value)
}

19. Getting access to HTML elements via @ViewChild
Typ - referencja

name: <input type="text" #serverRef>

import z angular core
@ViewChild('#serverRef', {static: true}) serverContentInput: ElementRef;

onAddServer(nameInput: HTMLInputElement) {
  console.log(this.serverContentInput.nativeElement.value)
}

20. ng-content - dane pomiędzy znacznikami komponentu
PARENT
<app-server>
  <h1>Hello</h1>
</app-server>

CHILD
<div>
<ng-content></ng-content>
<h2>world</h2>
</div>

21. Lifecycle methods

  constructor() {
    console.log('constructor called');
    //Called on new object initialization
  }

  ngOnChanges(changes: SimpleChanges) {
    console.log('ngOnChanges called');
    //Called after a bound input property changes
  }

  ngOnInit(): void {
    console.log('ngOnInit called');
    //Called once the component is initialized
  }

  ngDoCheck(): void {
    console.log('ngDoCheck called');
    //Called during every change detection run
  }

  ngAfterContentInit(): void {
    console.log('ngAfterContentInit called');
    //Called after content (ng-content) has been projected into view
  }

  ngAfterContentChecked(): void {
    console.log('ngAfterContentChecked called');
    //Called every time the projected content has been checked
  }

  ngAfterViewInit(): void {
    console.log('ngAfterViewInit called');
    //Called after the component’s view (and child views) has been initialized
  }

  ngAfterViewChecked(): void {
    console.log('ngAfterViewChecked called');
    //Called every time the view (and child views) have been checked
  }

  ngOnDestroy(): void {
    console.log('ngOnDestroy called');
    //Called once the component is about to be destroyed
  }

22. Getting access to HTML elements via @ContentChild (elements that are passed to another component, therefore not directly in view - but in content)
@ContentChild('#serverRef', {static: true}) serverContentInput: ElementRef;

<app-cockpit>
  name: <input type="text" #serverRef> //this is (<ng-content)
</app-cockpit>

23. Custom attribute directive - better to use renderer, not just the element reference - not manipulate DOM directly
private attribute in the constructor adds the property to the class

ng g d

import { Directive, ElementRef, OnInit, Renderer2 } from '@angular/core';

@Directive({
  selector: '[appBetterHighlight]',
})
export class BetterHighlightDirective implements OnInit {
  constructor(private elRef: ElementRef, private renderer: Renderer2) {}

  ngOnInit() {
    this.renderer.setStyle(
      this.elRef.nativeElement,
      'background-color',
      'silver'
    );
  }
}

<p appBetterHighlight>Paragraph styled with custom directive (renderer)</p>'

24. using HostListener to listen to events that occur on the host of directive

  @HostListener('mouseenter') mouseover(eventData: Event) {
    this.renderer.setStyle(
      this.elRef.nativeElement,
      'background-color',
      'silver'
    );
  }

25. using HostBinding to bint to properties of the host element that we are using in the directive

  @HostBinding('style.backgroundColor') backgroundColor: string = 'transparent';

  @HostListener('mouseenter') mouseover(eventData: Event) {
    this.backgroundColor = 'silver';
  }

26. Binding to directive properties

A)
@Input() highlightColor: string = 'gold';
<p appBetterHighlight [highlightColor]="'red'">
  Paragraph styled with custom directive (renderer, hostbinding)
</p>

B) - only when passing string
@Input() highlightColor: string = 'gold';
<p appBetterHighlight highlightColor="red">
  Paragraph styled with custom directive (renderer, hostbinding)
</p>

C) - using alias
@Input('appBetterHighlight') highlightColor: string = 'transparent';
<p [appBetterHighlight]="red">
  Paragraph styled with custom directive (renderer, hostbinding)
</p>

27. Custom structural directive

  @Input() set appUnless(condition: boolean) {
    if (!condition) {
      this.vcRef.createEmbeddedView(this.templateRef);
    } else {
      this.vcRef.clear();
    }
  }
  constructor(
    private templateRef: TemplateRef<any>,
    private vcRef: ViewContainerRef
  ) {}

<p *appUnless="false">
  Paragraph made with custom structural directive
</p>

28. ngSwitch built in directive
value = 10;

<div [ngSwitch]="value">
  <p *ngSwitchCase="5">value is 5</p>
  <p *ngSwitchCase="10">value is 10</p>
  <p *ngSwitchDefault>value is default</p>
</div>

29. Creating a service

@Injectable({providedIn: 'root'})

export class LoggingService {
  logStatusChange(status: string) {
    console.log('A server status changed, new status: ' + status);
  }
}



  constructor(private loggingService: LoggingService) {}

  onSetTo(status: string) {
    this.loggingService.logStatusChange(status);
  }

30. Import service into service

below is a body of accounts service

  constructor(private loggingService: LoggingService) {}

  addAccount(name: string, status: string) {
    this.accounts.push({ name: name, status: status });
    this.loggingService.logStatusChange(status);
  }

31. Cross component communication using service 
-(service below)

  statusUpdated = new EventEmitter<string>();

-(component account)

  onSetTo(status: string) {
    this.accountsService.statusUpdated.emit(status);
  }

-(component new account)

  constructor(private accountsService: AccountsService) {
    this.accountsService.statusUpdated.subscribe((status: string) =>
      alert('New status: ' + status)
    );
  }

32. Routing

  app-module

const appRoutes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'users', component: UsersComponent },
  { path: 'servers', component: ServersComponent }
];

@NgModule({

  imports: [BrowserModule, FormsModule, RouterModule.forRoot(appRoutes)],

})

    <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">
      <router-outlet></router-outlet>
    </div>

        <li><a routerLink="/">Home</a></li>
        <li><a routerLink="/servers">Servers</a></li>
        <li><a routerLink="/users">Users</a></li>

/servers - with slash, it points to the root route
servers - without slash, its's relative to the current route

33. Routing with active route

        <li
          role="presentation"
          routerLinkActive="active"
          [routerLinkActiveOptions]="{ exact: true }"
        >
          <a routerLink="/">Home</a>
        </li>
        <li role="presentation" routerLinkActive="active">
          <a routerLink="/servers">Servers</a>
        </li>
        <li role="presentation" routerLinkActive="active">
          <a routerLink="/users">Users</a>
        </li>

exact-this exact route - otherwise, its active all the time, because all other paths start with a "/"

33. Trigger route change in code with router.navigate

  constructor(private router: Router) {}

  onLoadServers() {
    this.router.navigate(['/servers']);
  }

34. router.navigate with relative path
router.navigate is not aware of the current route like routerLink is, so we need to add ActivatedRoute to achieve this

  constructor(
    private router: Router,
    private route: ActivatedRoute
  ) {}

    onReload() {
    this.router.navigate(['servers'], { relativeTo: this.route });
  }

35. Routes with params

const appRoutes: Routes = [
  { path: 'users', component: UsersComponent },
  { path: 'users/:id', component: UserComponent },
];

36. Routes with child routes

const appRoutes: Routes = [
  { path: '', component: HomeComponent },
  {
    path: 'users',
    component: UsersComponent,
    children: [{ path: ':id/:name', component: UserComponent }],
  },
  {
    path: 'servers',
    component: ServersComponent,
    children: [
      { path: ':id', component: ServerComponent },
      { path: ':id/edit', component: EditServerComponent },
    ],
  },
];

we also need another <router-outlet> in the servers and users components

37. Redirect to route and catch unknown routes

  { path: 'not-found', component: PageNotFoundComponent },
  { path: '**', redirectTo: '/not-found' },

  ** path should be the last one in the file

// TO FINISH ROUTING PARTS - 150, 151, 152, 153

38. Observables

observable - jakies dane które mogą się zmieniać,
można się do nich subskrybować

w przypadku własnych customowych observable, trzeba zrobić unsubscribe
wbudowane mają to domyślnie

  private firstObsSubscription!: Subscription;
  constructor() {}

  ngOnInit() {
    this.firstObsSubscription = interval(1000).subscribe((count) => {
      console.log(count);
    });
  }

  ngOnDestroy() {
    this.firstObsSubscription.unsubscribe();
  }

39. Custom observable with error and completion

  ngOnInit() {
    // this.firstObsSubscription = interval(1000).subscribe((count) => {
    //   console.log(count);
    // });
    const customObservable = new Observable((observer: Observer<any>) => {
      let count = 0;
      setInterval(() => {
        observer.next(count);
        if (count === 2) {
          observer.complete();
        }
        if (count > 3) {
          observer.error(new Error('count is too big'));
        }
        count++;
      }, 1000);
    });

    this.secondObsSubscription = customObservable.subscribe(
      (data) => {
        console.log(data);
      },
      (error) => {
        alert(error.message);
      }, () => {
        console.log('completed')
      }
    );
  }

  ngOnDestroy() {
    this.secondObsSubscription.unsubscribe();
  }

40.  Using RXJS operators, operators allow us to modify the data we get fromt he observable

We need to add .pipe(), which allows us to use operators like map or/and filter

    const customObservable = new Observable((observer: Observer<any>) => {
      let count = 0;
      setInterval(() => {
        observer.next(count);
        if (count === 5) {
          observer.complete();
        }
        if (count > 10) {
          observer.error(new Error('count is too big'));
        }
        count++;
      }, 1000);
    });

    this.secondObsSubscription = customObservable
      .pipe(
        filter((data) => {
          return data > 0;
        }),
        map((data) => {
          return 'Round: ' + (data);
        })
      )
      .subscribe({
        next: (data) => {
          console.log(data);
        },
        error: (error) => {
          alert(error.message);
        },
        complete: () => {
          console.log('completed');
        },
      });
  }

  ngOnDestroy() {
    this.secondObsSubscription.unsubscribe();
  }

  41. RXJS Subject

  Subject is something we can subscribe to, we can call next on it, we can use it as an event emitter

  USER COMPONENT:

    onActivate() {
    this.userService.activatedEmitter.next(true);
    }

  USER SERVICE:

      activatedEmitter = new Subject<boolean>();

  APP COMPONENT:

        ngOnInit() {
          this.userService.activatedEmitter.subscribe(
          (didActivate) => (this.userActivated = didActivate)
        );

42. TEMPLATE FORMS

input fields need a name property, and a ngModel, so that angular registries them

            <input
              ngModel
              name="username"
              type="text"
              id="username"
              class="form-control"
            />

Form needs a reference to the object that angular creates, which is then assed to the onSubmit method
      
      <form #f="ngForm" (ngSubmit)="onSubmit(f)">

        onSubmit(form: NgForm) {
          console.log(form);
        }

43. accesing the form object with ViewChild

The benfit of this aproach is that we can use the form object before the onSubmit method is called - good for validation

      <form #f="ngForm" (ngSubmit)="onSubmit()">

        @ViewChild('f') form!: NgForm;

        onSubmit() {
          console.log(this.form);
        }

44. Simple validation - required, email
With template forms we need to add directives that are validators

            <input
              ngModel
              name="username"
              type="text"
              id="username"
              class="form-control"
              required
            />
          </div>
         
            <input
              ngModel
              name="email"
              type="email"
              id="email"
              class="form-control"
              email
            />

              onSubmit() {
                console.log(this.form.valid);
              }

Additionally, you might also want to enable HTML5 validation (by default, Angular disables it).
 You can do so by adding the ngNativeValidate  to a control in your template.

45. Displaying an validation message

we add an local reference, which points to the ngModel (and that is that exact one item of the whole form object with its properties)
            <input
              ngModel
              name="email"
              type="email"
              id="email"
              class="form-control"
              email
              required
              #email="ngModel"
            />

          <p *ngIf="!email.valid && email.touched">
            Please enter a valid email adress - eg. name@domain.com
          </p>

46. Default value - [one way binding] - we need to property bind ngModel to the class property, that has a default value attached to it

defaultPet = 'pet';

<select [ngModel]="defaultPet" name="secret" id="secret" class="form-control">
  <option value="pet">Your first Pet?</option>
  <option value="teacher">Your first teacher?</option>
</select>

47. [(Two way binding)] ngModel to have a default value, and display it if it changes

  answer = '';

     <textarea
       class="form-control"
       [(ngModel)]="answer"
       name="questionAnswer"
       rows="3"
     ></textarea>
      <p>Your reply: {{ answer }}</p>

48. Grouping form controls - we might want to use that to group some parts of the data, for eg user data, login data etc
We then have those inputs grouped in the object that angular creates, by the name we specify

We might want to add a reference to that group, so we can have the acces to the ts object, and display error messsages

1. HERE WE ADD A GROUP TO GROUP IT INSIDE THE OBJECT       
        <div ngModelGroup="loginData" 

2. HERE WE ADD A LOCAL REFERENCE, SO WE CAN ACCES THAT OBJECT           
        #loginData="ngModelGroup">

          <div class="form-group">
            <label for="password">Password</label>
            <input
              ngModel
              name="password"
              type="password"
              id="password"
              class="form-control"
              required
            />
          </div>
          <div class="form-group">
            <label for="login">Login</label>
            <input
              ngModel
              name="login"
              type="email"
              id="login"
              class="form-control"
              required
            />
          </div>

          2.1 WE ACCESS THE OBJECT HERE          
          <p *ngIf="!loginData.valid && loginData.touched">

            Login data is not valid!
          </p>
        </div>

49. Radio buttons (with default) - we loop through the array of given data

  genders = ['male', 'female'];


        <div class="radio" *ngFor="let gender of genders">
          <label>
            <input
              type="radio"
              name="gender"
              [ngModel]="'male'"   ---- normal would be just ngModel, the syntax on the left is for default
              [value]="gender"
              required
            />
            {{ gender }}
          </label>
        </div>

50. Changing the data programatically, for eg. inject a suggested username
set whole form with setValue, change only selected values with patchValue


  @ViewChild('f') myForm!: NgForm;

  suggestUserName() {
    const suggestedName = 'Superuser';

    // REPLACE WHOLE OBJECT
    // this.myForm.setValue({
    //   userData: {
    //     username: suggestedName,
    //     email: '',
    //   },
    //   secret: 'pet',
    // });

    // REPLACE ONLY SELECTED VALUES
    this.myForm.form.patchValue({
      username: suggestedName,
    });
  }

51. Display the data gathered by the form

  user = {
    username: '',
    mail: '',
    secretQuestion: '',
    secretAnswer: '',
    gender: '',
    submitted: false,
  };

  onSubmit() {
    this.user = {
      username: this.myForm.value.username,
      mail: this.myForm.value.email,
      secretQuestion: this.myForm.value.secret,
      secretAnswer: this.myForm.value.questionAnswer,
      gender: this.myForm.value.gender,
      submitted: true
    };
  }
  <div *ngIf="user.submitted">
      <h3>Your Data</h3>
      <p>Username: {{ user.username }}</p>
      <p>Mail: {{ user.mail }}</p>
      <p>Secret Question: {{ user.secretQuestion }}</p>
      <p>Answer: {{ user.secretAnswer }}</p>
      <p>Gender: {{ user.gender }}</p>
  </div>

52. Resetting forms - just use reset() method on the form viewchild.
The other approach would be to set it to specific values with setValue() and providing the whole object

  @ViewChild('f') myForm!: NgForm;

  onSubmit() {
    this.myForm.reset();
  }


53. REACTIVE FORMS  - setup
we need to import ReactiveFormsModule in app.module

then, we assing FormGroup to a class property
signupForm!: FormGroup;



54. Creating a basic form

  signupForm!: FormGroup;

  ngOnInit(): void {
    this.signupForm = new FormGroup({
      'name': new FormControl(null),
      'mail': new FormControl(null),
      'gender': new FormControl('male'),
    });
  }

  <form [formGroup]="signupForm">
    <input
      formControlName="name"
    />
    <input
      formControlName="mail"
    />
     <div class="radio" *ngFor="let gender of genders">
          <label>
            <input formControlName="gender" type="radio" [value]="gender" />{{
              gender
            }}
          </label>
        </div>
  </form>


55. Submit the reactive form - very siiliar, ngSubmit aswell, but the benefit of this is that we don't need to access te reference to the submitted form,
because we already have it definied in ts file

<form [formGroup]="signupForm" (ngSubmit)="onSubmit()">

  
  signupForm!: FormGroup;

  onSubmit() {
    console.log(this.signupForm);
  }

56. Reactive validation

  ngOnInit(): void {
    this.signupForm = new FormGroup({
      name: new FormControl(null, Validators.required),
      mail: new FormControl(null, [Validators.required, Validators.email]),
    });
  }

57. Reactive validation - display a message

? - typescript thing

    <span
      *ngIf="
        !signupForm.get('mail')?.valid && signupForm.get('mail')?.touched
      "
      class="help-block"
      >Please enter a valid email!</span
    >

58. Grouping form controls

We add another form group here

  ngOnInit(): void {
    this.signupForm = new FormGroup({
      userDetails: new FormGroup({
        name: new FormControl(null, Validators.required),
        mail: new FormControl(null, [Validators.required, Validators.email]),
      }),
      gender: new FormControl('male'),
    });
  }

  And then add formGroupName directive to the element, that gathers the items we want to group
  Then, we also need to correct the paths in the .get() method

  <form [formGroup]="signupForm" (ngSubmit)="onSubmit()">
        <div formGroupName="userDetails">
            <input
              formControlName="name"
            />
            <span
              *ngIf="
                !signupForm.get('userDetails.name')?.valid &&
                signupForm.get('userDetails.name')?.touched
              "
              >Please enter a valid username!</span
            >

59. Add an array of controls - add fields dynamically

  ngOnInit(): void {
    this.signupForm = new FormGroup({
      hobbies: new FormArray([]),
    });
  }

  onAddHobby() {
    const control = new FormControl(null, Validators.required);

    (<FormArray>this.signupForm.get('hobbies')).push(control);
  }

  getControls() {
    return (<FormArray>this.signupForm.get('hobbies')).controls;
  }

        <div formArrayName="hobbies">
          <h4>Your Hobbies</h4>
          <button type="button" (click)="onAddHobby()">Add Hobby</button>
          <div *ngFor="let hobbyControl of getControls(); let i = index">
            <input type="text" class="form-control" [formControlName]="i"/>
          </div>
        </div>

60. Custom validator

 name: new FormControl(null, [Validators.required, this.forbiddenNames.bind(this)]),

 
  forbiddenNames(control: FormControl): { [s: string]: boolean } | null {
    if (this.forbiddenUsernames.indexOf(control.value) !== -1) {
      return { nameIsForbidden: true };
    }
    return null;
  }

61. Acessing error codes from the controls, to display the appropriate error message

  <span *ngIf="signupForm.get('userDetails.name')?.errors?.['nameIsForbidden']">This name is just wrong ;)</span>
  <span *ngIf="signupForm.get('userDetails.name')?.errors?.['required']">This field is required, please type your username.</span>

62. Asynchronous validators

        mail: new FormControl(null, {
          validators: [Validators.required, Validators.email],
          asyncValidators: this.forbiddenEmail,
        }),


forbiddenEmail(control: FormControl | any): Promise<any> | Observable<any> {
    const promise = new Promise<any>((resolve, reject) => {
      setTimeout(() => {
        if (control.value === 'test@test.com') {
          resolve({ emailIsForbidden: true });
        } else {
          resolve(null);
        }
      }, 1500);
    });
    return promise;
  }

63. Reacting to status or value changes

    this.signupForm.valueChanges.subscribe((value) => {
      console.log(value);
    });

    this.signupForm.statusChanges.subscribe((value) => {
      console.log(value);
    });

64. SetValues of the form programatically, patchValue, and reset in REACTIVE FORMS

    this.signupForm.setValue({
      userDetails: {
        name: 'bs',
        mail: 'sd',
      },
      gender: 'male',
      hobbies: [],
    });

    this.signupForm.patchValue({
      userDetails: {
            name: 'bartek',
          },
    })

    this.signupForm.reset() --------- its also possible to pass an object to reset(), to reset to specific values (for eg. leave the value of default radio)

65. Using HTTP

the first step is to import HttpClientModule into app.module

then, we need to asign the module to a class propety using the constructor

  constructor(private http: HttpClient) {}

66. POST request - this.http.post(url, requestBody) - and then we need to .subscribe(),
because without it the request wont be executed

  onCreatePost(postData: { title: string; content: string }) {
    this.http
      .post(
        'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json',
        postData
      )
      .subscribe((responseData) => {
        console.log(responseData);
      });
  }

67. GET request - needs subscribe() aswell

  private fetchPosts() {
    this.http
      .get(
        'https://angular-guide-16de1-default-rtdb.europe-west1.firebasedatabase.app/posts.json'
      )
      .subscribe((posts) => {
        console.log(posts);
      });
  }

  
  ngOnInit() {
    this.fetchPosts();
  }

68. Use RXJS opertaor map(), to transform the data. Transofrming the object into array.

      .pipe(
        map((responseData) => {

          const postsArray = [];
          const responseObject: { [index: string]: any } = responseData;
          
          for (const key in responseObject) {
            if (responseData.hasOwnProperty(key)) {
              postsArray.push({ ...responseObject[key], id: key });
            }
          }

          return postsArray;
        })
      )

